Kubernets installaton Steps :

1. Install Docker in all VMs

			a) Install docker on all 3 VMs

				$ curl -fsSL https://get.docker.com -o get-docker.sh
   				$ sh get-docker.sh
			
			b) Add users to Docker group

				$ sudo usermod -aG docker master/worker01/worker02

			c) Turn off swap

				$ sudo swapoff -a

			c) Exit and re-login


5. Install Go lang in all 3 VMs as root user 

			a) Run these commands as root in all 3 VMs

				root $ wget https://storage.googleapis.com/golang/getgo/installer_linux

				root $ chmod +x ./installer_linux

				root $ ./installer_linux

				root $ source /root/.bash_profile


6. Installing cri-dockerd ( all nodes as root )

				root $ git clone https://github.com/Mirantis/cri-dockerd.git

				root $ cd cri-dockerd

				root $ mkdir bin

				root $ go build -o bin/cri-dockerd   

				root $ mkdir -p /usr/local/bin

				root $ install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd

				root $ cp -a packaging/systemd/* /etc/systemd/system

				root $ sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service

				root $ systemctl daemon-reload

				root $ systemctl enable cri-docker.service

				root $ systemctl enable --now cri-docker.socket


7. Installing kubeadm, kubelet and kubectl  ( all nodes as root )

				root $ cd ~ 

				root $ sudo apt-get update

				root $ sudo apt-get install -y apt-transport-https ca-certificates curl

				root $ sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

				root $ echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

				root $ sudo apt-get update

				root $ sudo apt-get install -y kubelet kubeadm kubectl

				root $ sudo apt-mark hold kubelet kubeadm kubectl


8. Run the next commands as root only in Master {master-node} node to setup cri-socket

	(as root)   root@Master-node:~# kubeadm init --pod-network-cidr "10.244.0.0/16" --cri-socket "unix:///var/run/cri-dockerd.sock"


9. After executing the above command you will get the following steps mkdir,sudo sp,sudo chown run them as a regular user

	--> Your Kubernetes control-plane has initialized successfully!

	--> To start using your cluster, you need to run the following as a regular user:

				root@Master-node:~# exit

  				master@Master-node:~$ mkdir -p $HOME/.kube

    				master@Master-node:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    				master@Master-node:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

	--> Alternatively, if you are the root user, you can run:

  				master@Master-node:~$ export KUBECONFIG=/etc/kubernetes/admin.conf


10. Install Flannel to start ( only master node )

				master@Master-node:~$ kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

11. Check whether your node (master-node) is running or not

				master@Master-node:~$ kubectl get nodes -w ( -w for watch, watches any changes )

12. Go to Worker-node 01 and 02 and execute

				worker@worker-node-01:~$ su - root

				root@worker-node-01:~# export KUBECONFIG=/etc/kubernetes/admin.conf

				root@worker-node-01:~# kubeadm join 10.0.0.4:6443 --token pozx3l.mh39vjz1rnc7rc1t \
					> --cri-socket "unix:///var/run/cri-dockerd.sock" \
					> --discovery-token-ca-cert-hash sha256:04ddbd0439b039f8b189c9cb1334bf8a46a0856a5dcf9247b006900a994fddd6

				root@worker-node-02:~# export KUBECONFIG=/etc/kubernetes/admin.conf

				root@worker-node-02:~# kubeadm join 10.0.0.4:6443 --token pozx3l.mh39vjz1rnc7rc1t \
					> --cri-socket "unix:///var/run/cri-dockerd.sock" \
					> --discovery-token-ca-cert-hash sha256:04ddbd0439b039f8b189c9cb1334bf8a46a0856a5dcf9247b006900a994fddd6

_____________________________________________________________________________________________________________________________________
**********  you will get the above 1st and 3rd line when you execute 
				master@Master-node:~$ kubeadm init --pod-network-cidr "10.244.0.0/16" --cri-socket "unix:///var/run/cri-dockerd.sock"

********* You will get 2nd line when you execute 

				master@Master-node:~$ kubeadm init
Found multiple CRI endpoints on the host. Please define which one do you wish to use by setting the 'criSocket' field in the kubeadm configuration file: unix:///var/run/containerd/containerd.sock, unix:///var/run/cri-dockerd.sock
____________________________________________________________________________________________________________________________________

13. Go to Manager-node and check 

				master@Master-node:~$ kubelet get pods -w

